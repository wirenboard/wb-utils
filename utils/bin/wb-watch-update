#!/bin/bash
# vim: set noexpandtab:
#set -x
UPDATE_FIT_END_SIGNATURE="__WB_UPDATE_FIT_END__"
UPDATE_LOG="/var/log/update.log"

PID_FILE="/var/run/wb-watch-update.pid"

AB_WATCH_DIR="/var/www/uploads"
SINGLE_WATCH_DIR="/mnt/data/.wb-update"

WB_FACTORY_FIT="/mnt/data/.wb-restore/factoryreset.fit"

# added to read FIT compatibility flags
fit_prop() {
    local node=$1
    local prop=$2

    local tmp=`fit_info -f $FIT -n $node -p $prop`
    local len=`sed -rn 's#LEN: (.*)#\1#p' <<< "$tmp"`
    local off=`sed -rn 's#OFF: (.*)#\1#p' <<< "$tmp"`
    [[ -n "$len" && -n "$off" ]] || return 1
    #dd if=$FIT skip=$off count=$len iflag=skip_bytes,count_bytes 2>/dev/null
    tail -c +$((off + 1)) $FIT 2>/dev/null | head -c $len 2>/dev/null
}

fit_prop_string() {
    fit_prop "$@" | tr -d '\0'
}

fw_compatible() {
    local feature="$1"
    local fw_compat
    fw_compat=$(fit_prop_string / firmware-compatible)

    case "$fw_compat" in
        *"+$feature "*) return 0 ;;
        *) return 1 ;;
    esac
}

cleanup() {
    [[ -f "$PID_FILE" ]] && kill `cat "$PID_FILE"` 2>/dev/null
    rm -f "$PID_FILE"
}

check_fully_received() {
    local sig_len=`echo -n "$UPDATE_FIT_END_SIGNATURE" | wc -c`
    local sig=`tail -c $sig_len $1`
    [[ "$sig" == "$UPDATE_FIT_END_SIGNATURE" ]]
}

cleanup_watch_dir() {
  find $AB_WATCH_DIR/ -maxdepth 1 -type f "$@" -delete
  find $SINGLE_WATCH_DIR/ -maxdepth 1 -type f "$@" -delete
}

log() {
    logger -t wb-watch-update "$*"
}

mqtt_status() {
    mosquitto_pub -r -t /firmware/status -m "$*"
}

mqtt_log_retain() {
    mosquitto_pub -t /firmware/log -m "$*" -r
}

mqtt_log() {
    mosquitto_pub -t /firmware/log -m "$*"
}

mqtt_log_pipe() {
    mosquitto_pub -t /firmware/log -l
}

mqtt_log_reset() {
    mosquitto_pub -t /firmware/log -m "" -r
}

DEFAULT_STATUS="IDLE"

maybe_publish_singlemode_update_status() {
    local logfile="$SINGLE_WATCH_DIR/state/update.log"
    local statusfile="$SINGLE_WATCH_DIR/state/update.status"

    if [ -e "$statusfile" ]; then
        if [ -e "$logfile" ]; then
            log "Seems like update just have been done, printing logs and saving it in retained"
            log "Saved status: $(cat "$statusfile")"
            log "Please reload page if there is no 'Done' button"

            mqtt_log_retain "$({
                echo ">>> Installation logs:"
                sed -e 's/^INFO /%%% /' -e 's/^REBOOT.*$/%%% (reboot)/' < "$logfile"
            })"
        fi

        # This is a combined status example. It should not be used anywhere
        # but in this tool in order to preseve compatibility.
        #
        # See app/scripts/react-directives/firmware-update/store.js in homeui
        # to know more about it.

        DEFAULT_STATUS="$({
            cat "$statusfile"
            echo -ne "\nIDLE"
        })"
        rm -rf "$statusfile"
    fi
}

publish_fit_info() {
    local fit="$1"
    local channel="$2"
    if [ -e "$fit" ]; then
        mosquitto_pub -t "/firmware/fits/$channel/present" -m true -r
        mosquitto_pub -t "/firmware/fits/$channel/compatibility" -m "$(FIT=$fit fit_prop_string / firmware-compatible)" -r
    else
        mosquitto_pub -t "/firmware/fits/$channel/present" -m false -r
    fi
}

publish_factoryreset_fits_info() {
    local factoryreset_original_fit="/mnt/data/.wb-restore/factoryreset.original.fit"

    publish_fit_info "$WB_FACTORY_FIT" "factoryreset"
    publish_fit_info "$factoryreset_original_fit" "factoryreset-original"
}

publish_factoryreset_fits_info

maybe_publish_singlemode_update_status

mkdir -p "$AB_WATCH_DIR"
mkdir -p "$SINGLE_WATCH_DIR"
chown www-data:www-data "$AB_WATCH_DIR"
chown www-data:www-data "$SINGLE_WATCH_DIR"

LAST_FIT=''

(
    echo "$BASHPID" > "$PID_FILE"
    2>/dev/null exec inotifywait -m -r \
        --exclude "($AB_WATCH_DIR/state/|$SINGLE_WATCH_DIR/state/)" \
        --event close_write $AB_WATCH_DIR/ $SINGLE_WATCH_DIR/ \
) | {
trap cleanup EXIT

# wait for mosquitto to open socket
while ! mqtt_status "$DEFAULT_STATUS"; do
    sleep 1
done

while read EVENT_DIR EVENT_TYPE EVENT_FILE; do
    FIT="${EVENT_DIR}${EVENT_FILE}"

    # skip install_update.flags file event, it may be used for debugging
    case "$FIT" in
    *install_update.*)
        continue
        ;;
    esac

    # Prevent endless loop
    [[ "$FIT" != "$LAST_FIT" ]] || continue
    [[ -e "$FIT" ]] || continue
    LAST_FIT=$FIT

    mqtt_log_reset

    # Ensure that image was received completely
    check_fully_received $FIT || {
        if [[ $EVENT_FILE == "wb_use_factory_fit.flag" ]]; then
            echo "--factoryreset --from-emmc-factoryreset " > "${EVENT_DIR}install_update.web.flags"
            webupd_fit_file="webupd.fit"
            FIT="${EVENT_DIR}${webupd_fit_file}"
            EVENT_FILE="$webupd_fit_file"
            was_immutable=$(lsattr -l $WB_FACTORY_FIT | grep "Immutable" || true)
            chattr -i $WB_FACTORY_FIT
            ln "$WB_FACTORY_FIT" "$FIT"  # uboot has hardcoded webupd fit name
            sync
            [[ -n "$was_immutable" ]] && chattr +i $WB_FACTORY_FIT
        else
            msg="Received incomplete update FIT $FIT, don't starting update"
            log "$msg"
            mqtt_status "ERROR $msg"
            mqtt_status "IDLE"
            rm -f $FIT
            LAST_FIT=""
            continue
        fi
    }

    # Remove old updates, we won't run it anyway
    cleanup_watch_dir -not -name ${EVENT_FILE} -not -name 'install_update.*'

    # Some sanity checks
    web_flags_file="$(dirname "$FIT")/install_update.web.flags"
    if [ -e "$web_flags_file" ]; then
        if grep "\--factoryreset " "$web_flags_file"; then
            if ! fw_compatible fit-factory-reset; then
                msg="Factory reset requested, but FIT file does not support it, cancelling operation"
                log "$msg"
                mqtt_log "$msg"
                mqtt_status "ERROR Incompatible FIT file"
                mqtt_status "IDLE"
                rm -f "$web_flags_file"
                rm -f "$FIT"
                LAST_FIT=""
                continue
            fi
        fi
        if grep "\--from-cloud " "$web_flags_file"; then
            if ! fw_compatible update-from-cloud; then
                msg="Chosen FIT file does not support updating from cloud (FIT does not include 'wb-cloud-agent' package -> connection will be lost)! Try latest FIT."
                log "$msg"
                mqtt_log "$msg"
                mqtt_status "ERROR Update from cloud is not supported in chosen FIT! Try latest one."
                mqtt_status "IDLE"
                rm -f "$web_flags_file"
                rm -f "$FIT"
                LAST_FIT=""
                continue
            fi
            if grep "\--factoryreset " "$web_flags_file"; then
                msg="Factoryreset is not supported via cloud (connections to all custom providers will be lost)!"
                log "$msg"
                mqtt_log "$msg"
                mqtt_status "ERROR Factoryreset is not supported via cloud"
                mqtt_status "IDLE"
                rm -f "$web_flags_file"
                rm -f "$FIT"
                LAST_FIT=""
                continue
            fi
        fi
    fi

    msg="Received good update FIT $FIT, starting update"
    log "$msg"
    mqtt_log "$msg"

  if ! fw_compatible force-repartition; then
      web_flags_file="$(dirname "$FIT")/install_update.web.flags"
      if [ -e "$web_flags_file" ]; then
          msg="force-repartition flag not supported by FIT, removing $web_flags_file"
          log "$msg"
          mqtt_log "$msg"
          rm -f "$web_flags_file"
      fi
  fi

    wb-run-update $FIT 2>&1 | tee -a "$UPDATE_LOG" | mqtt_log_pipe
    if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
        FIT=""
        LAST_FIT=""
    fi

    if [ -e "$SINGLE_WATCH_DIR/state/update.status" ] ; then
        log "Exiting wb-watch-update, restart is required by FIT"
        exit 0
    fi

    rm -f $FIT
done
}
