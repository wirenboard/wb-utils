#!/bin/bash
#set -e
#set -x

# This script will be greatly simplified in the future, so please
#
#   DO NOT ADD ANY NEW FEATURES HERE!
#
# A great place for the new update features is
# utils/lib/wb-image-update/fit/install_image.sh file
# in this repository.

TMPDIR="/dev/shm"
FIT=""
FLAGS=""

# for factory reset
DATA_PART="/dev/mmcblk0p6"
DATA_LABEL="data"

# Some handy functions, usable in install script
flag_set() {
	grep -- "--$1 " 2>&1 > /dev/null <<< "$FLAGS"
}

rm_fit() {
	flag_set no-remove && return 0
	info "Removing FIT $FIT"
	rm -f "$FIT"
}

led() {
	echo $3 > /sys/class/leds/$1/$2 || true
}

led_process() {
	led green trigger timer
	led green delay_on 500
	led green delay_off 500

	led red trigger mmc0
}

led_success() {
	led green trigger none
	led green brightness 255

	led red trigger none
	led red brightness 0
}

led_failure() {
	led green trigger none
	led green brightness 0

	led red trigger timer
	led red delay_on 500
	led red delay_off 500
}

led_prompt() {
	led green trigger none
	led green brightness 0

	led red trigger timer
	led red delay_on 100
	led red delay_off 100
}

flag_set no-mqtt && {
	mqtt_status() { :; }

	mqtt_progress() {
		while read x; do
			echo -en "\rPROGRESS: $x%"
		done
		echo
	}

	prompt_update_factoryreset() {
		led_prompt
		>&2 cat <<EOF
##############################################################################

                          FACTORY RESET REQUESTED

           This WILL destroy ALL YOUR DATA: configuration, scripts,
                           files in home directory!

         If you are ABSOLUTELY SURE that you want to reset Wiren Board
             to factory condition, hold the FW button for 4 seconds.

        If you will not do it in 10 seconds, the controller will reboot
                        without firmware update.


           If you want to perform a regular firmware update, rename
         FIT file to "wbX_update.fit" without "factory-reset" suffix.

##############################################################################
EOF
		USE_BUZZER=y USE_ECHO=y WAIT_TIME=10 HOLD_TIME=4 wait_for_button 1>&2
		local result=$?
		led_process
		return $result
	}

} || {
	mqtt_status() {
		mosquitto_pub -t /firmware/status -r -m "$*" 2>/dev/null >/dev/null || true
	}

	mqtt_progress() {
		mosquitto_pub -t /firmware/progress -l 2>/dev/null >/dev/null || true
	}

	prompt_update_factoryreset() {
		# TODO: upgrade with factory reset from Web interface
		true
	}
}

mkfs_ext4() {
	local part=$1
	local label=$2

	yes | mkfs.ext4 -L "$label" -E stride=2,stripe-width=1024 -b 4096 "$part"
}

to_hex() {
	od -t x1 |
	sed -r 's/^[^ ]+( |$)//; s/ //g; /^$/d' |
	tr -d '\n'
}

die() {
	local ret=$?
	local msg=${*:-"Failed"}
	>&2 echo "!!! $msg"
	rm_fit
	mqtt_status "ERROR $msg"
	mqtt_status "IDLE"
	[[ $? == 0 ]] && exit 1 || exit $?
}

info() {
	>&2 echo ">>> $*"
	mqtt_status "INFO $*"
}

fit_prop() {
	local node=$1
	local prop=$2

	local tmp=`fit_info -f $FIT -n $node -p $prop`
	local len=`sed -rn 's#LEN: (.*)#\1#p' <<< "$tmp"`
	local off=`sed -rn 's#OFF: (.*)#\1#p' <<< "$tmp"`
	[[ -n "$len" && -n "$off" ]] || return 1
	#dd if=$FIT skip=$off count=$len iflag=skip_bytes,count_bytes 2>/dev/null
	tail -c +$((off + 1)) $FIT 2>/dev/null | head -c $len 2>/dev/null
}

fit_prop_string() {
	fit_prop "$@" | tr -d '\0'
}

fit_blob_size() {
	local tmp=`fit_info -f $FIT -n /images/$1 -p data`
	sed -rn 's#LEN: (.*)#\1#p' <<< "$tmp"
}

fit_blob_data() {
	fit_prop "/images/$1" data
}

fit_blob_hash() {
	fit_prop "/images/$1/hash@1" value | to_hex
}

fit_blob_verify_hash() {
	local name=$1
	local sha1_expected=`fit_blob_hash $name`

	info "Checking SHA1 hash of $name"

	local blob_size=`fit_blob_size rootfs`
	local tmp=`mktemp -p $TMPDIR`
	(
		echo 0
		fit_blob_data $name | pv -n -s "$blob_size" | sha1sum | cut -f1 -d' ' > $tmp
	) 2>&1 | mqtt_progress "$x"
	local sha1_calculated=`cat $tmp`
	rm $tmp

	[[ "$sha1_expected" == "$sha1_calculated" ]] &&
		info "SHA1 hash of $name ok" ||
		die "SHA1 of $name doesn't match (expected $sha1_expected, got $sha1_calculated)"
}

[[ $EUID != 0 ]] && die "Need root privileges to install update"

while [[ -n "$1" ]]; do
	case "$1" in
		--*|-*)
			FLAGS+="$1 "
			;;
		*)
			[[ -n "$FIT" ]] && die "Bad arguments"
			FIT=`readlink -f $1`
			;;
	esac
	shift
done

[[ -f "$FIT" ]] || die "FIT $FIT not found"

flag_set no-mqtt && {
	# check factory reset condition here and add flag in this case
	case $FIT in
		*FACTORYRESET*|*factoryreset*)
			if flag_set no-confirm || prompt_update_factoryreset; then
				echo -e "\nFactory reset is confirmed!\n"
				FLAGS+="--factoryreset "
			else
				echo -e "\nFactory reset is NOT confirmed, reboot"
				reboot -f
			fi
			;;
	esac
}

led_process

>&2 cat <<EOF
===============================================================================
`date`: started update from $FIT
===============================================================================
Description:         $(fit_prop_string / description)
Compatible device:   $(fit_prop_string / compatible)
Firmware version:    $(fit_prop_string / firmware-version)
Firmware compatible: $(fit_prop_string / firmware-compatible)
Release name:        $(fit_prop_string / release-name)
Release suite:       $(fit_prop_string / release-suite)
Release target:      $(fit_prop_string / release-target)
Release repo prefix: $(fit_prop_string / release-repo-prefix)
Time of creation:    $(date -d @$[0x$(fit_prop / timestamp | to_hex)])
===============================================================================

EOF

fit_blob_verify_hash install

flag_set factoryreset && {
	if flag_set from-initramfs; then
		info "Wiping data partition (factory reset)"

		mkdir -p /mnt
		mkdir -p /mnt/data
		mount -t auto $DATA_PART /mnt/data || true

		rm -rf /tmp/empty && mkdir /tmp/empty
		rsync -a --delete --exclude="/.wb-restore/" /tmp/empty/ /mnt/data/

		FACTORY_FIT_DIR="/mnt/data/.wb-restore"
		FACTORY_FIT="${FACTORY_FIT_DIR}/factoryreset.fit"
		if [[ ! -e "$FACTORY_FIT" ]]; then
			echo "Saving current update file as factory default image"
			mkdir -p "${FACTORY_FIT_DIR}"
			cp "$FIT" "${FACTORY_FIT}"
		fi
	else
		info "Factory reset is now supported only from initramfs environment"
	fi
}

info "Extracting install script"
INSTALL_SCRIPT=`mktemp -p $TMPDIR`
fit_blob_data install > "$INSTALL_SCRIPT" || die

info "Running install script"
source "$INSTALL_SCRIPT"

rm -f "$INSTALL_SCRIPT"
